From 4b7c6b9ffb176a66526af915e0a5c789f2d6f64b Mon Sep 17 00:00:00 2001
From: Csongor Kiss <kiss.csongor.kiss@gmail.com>
Date: Mon, 16 Nov 2020 16:41:16 +0000
Subject: [PATCH] Fix testcase ambiguity

---
 AutoTest.hs    | 15 +++++++++------
 Submission1.hs |  1 -
 2 files changed, 9 insertions(+), 7 deletions(-)

diff --git a/AutoTest.hs b/AutoTest.hs
index 4caedaa..72c15b5 100644
--- a/AutoTest.hs
+++ b/AutoTest.hs
@@ -39,14 +39,14 @@ import System.IO
 main :: IO ()
 main = runTests $ do
   testFromFile "Knapsack' tests" (uncurry (knapsack' @String @Int @Int)) (==) "tests/knapsackTests.txt"
-  testFromFile "Knapsack'' tests" (uncurry (knapsack'' @String @Int @Int)) ((==) `on` fmap sort) "tests/knapsackTests2.txt"
-  testFromFile "Bounded knapsack tests" (uncurry (bknapsack @String @Int @Int)) ((==) `on` fmap sort) "tests/bknapsackTests.txt"
-  testFromFile "Bounded knapsack' tests" (uncurry3 (bknapsack' @String @Int @Int)) ((==) `on` fmap sort) "tests/bknapsackTests2.txt"
-  testFromFile "Bounded knapsack'' tests" (uncurry (bknapsack'' @String @Int @Int)) ((==) `on` fmap sort) "tests/bknapsackTests3.txt"
-  testFromFile "Dijkstra tests" (uncurry (shortestPaths @[(String, String, Integer)])) ((==) `on` sortBy cmpPath) "tests/dijkstra.txt"
+  testFromFile "Knapsack'' tests" (uncurry (knapsack'' @String @Int @Int)) ((==) `on` fst) "tests/knapsackTests2.txt"
+  testFromFile "Bounded knapsack tests" (uncurry (bknapsack @String @Int @Int)) ((==) `on` fst) "tests/bknapsackTests.txt"
+  testFromFile "Bounded knapsack' tests" (uncurry3 (bknapsack' @String @Int @Int)) ((==) `on` fst) "tests/bknapsackTests2.txt"
+  testFromFile "Bounded knapsack'' tests" (uncurry (bknapsack'' @String @Int @Int)) ((==) `on` fst) "tests/bknapsackTests3.txt"
+  testFromFile "Dijkstra tests" (uncurry (shortestPaths @[(String, String, Integer)])) ((==) `on` sort . map pathToTuple) "tests/dijkstra.txt"
   test "insert tests" (fromPQueue @Heap . uncurry toPQueue) (==) insertTests
   test "insert rank tests" (rankHeap . uncurry toPQueue) (==) insertRankTests
-  testFromFile "Dijkstra (heap) tests" (uncurry (shortestPaths' @[(String, String, Integer)])) ((==) `on` sortBy cmpPath) "tests/dijkstra.txt"
+  testFromFile "Dijkstra (heap) tests" (uncurry (shortestPaths' @[(String, String, Integer)])) ((==) `on` sort . map pathToTuple) "tests/dijkstra.txt"
   testFromFile "Conflict zones tests" (uncurry3 conflictZones) ((==) `on` (\(a, b, c) -> (sort a, sort b, sort c))) "tests/conflictZonesTests.txt"
   test "AdjList vertices tests" vertices ((==) `on` sort) [adjList :=> ["a", "b", "c", "d"]]
   test "AdjList edges tests" edges ((==) `on` sort) [adjList :=> [("a","b",10),("a","c",20),("b","a",5),("b","d",8),("d","b",3),("d","a",4)]]
@@ -58,6 +58,9 @@ main = runTests $ do
 uncurry3 :: (a->b->c -> d) -> (a,b,c) -> d
 uncurry3 f ~(a, b, c) = f a b c
 
+pathToTuple :: Path e -> (Weight, [e])
+pathToTuple (Path w es) = (w, es)
+
 instance Show (String -> String -> Ordering) where
   show _ = "<<function>>"
 
diff --git a/Submission1.hs b/Submission1.hs
index 463ddb6..e870b24 100644
--- a/Submission1.hs
+++ b/Submission1.hs
@@ -512,7 +512,6 @@ instance Show WormholeId where
 instance Read WormholeId where
   readsPrec = coerce (readsPrec @Int)
 
-deriving instance Eq e   => Eq (Path e)
 deriving instance Read e => Read (Path e)
 deriving instance Show e => Show (Path e)
 instance Show a => Show (PList a) where
-- 
2.24.3 (Apple Git-128)

